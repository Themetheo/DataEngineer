import re
from fuzzywuzzy import process

# ‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏£‡∏´‡∏±‡∏™ -> ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π)
menu_db = {
    "RNTYMD01": "‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏´‡∏°‡∏π‡πÅ‡∏î‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤",
    "RNTYMS01": "‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤",
    "ENWAKT01": "‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡∏ô‡πâ‡∏≥‡πÑ‡∏Å‡πà‡∏ï‡∏∏‡πã‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤"
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
}

# mapping ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
keyword_map = {
    "RN": "‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å",
    "WRN": "‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡∏ç‡πà",
    "EN": "‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà",
    "TRN": "‡∏´‡∏°‡∏µ‡πà‡∏Ç‡∏≤‡∏ß",
    "DPL": "‡πÄ‡∏Å‡∏µ‡πâ‡∏¢‡∏ß",
    "GN": "‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô",
    "MS": "‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö",
    "MD": "‡∏´‡∏°‡∏π‡πÅ‡∏î‡∏á",
    "MG": "‡∏´‡∏°‡∏π‡∏Å‡∏£‡∏≠‡∏ö",
    "MT": "‡∏´‡∏°‡∏π‡∏ï‡∏∏‡πã‡∏ô",
    "KT": "‡πÑ‡∏Å‡πà‡∏ï‡∏∏‡πã‡∏ô",
    "WA": "‡∏ô‡πâ‡∏≥",
    "DR": "‡πÅ‡∏´‡πâ‡∏á",
    "TS": "‡∏ï‡πâ‡∏°‡∏™‡πâ‡∏°",
    "TY": "‡∏ï‡πâ‡∏°‡∏¢‡∏≥",
    "SO": "‡πÄ‡∏Å‡∏≤‡πÄ‡∏´‡∏•‡∏≤",
    "01": "‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤",
    "02": "‡∏û‡∏¥‡πÄ‡∏®‡∏©",
    "WR": "‡∏Ç‡πâ‡∏≤‡∏ß",
    "SET": "‡∏Å‡∏±‡∏ö",
    "CM": "‡∏Ç‡∏≤‡∏´‡∏°‡∏π",
    "SAU": "‡∏Å‡∏∏‡∏ô‡πÄ‡∏â‡∏µ‡∏¢‡∏á"
}

# ‡∏™‡∏£‡πâ‡∏≤‡∏á reverse mapping (value -> key)
reverse_map = {v: k for k, v in keyword_map.items()}

def extract_keywords(text, reverse_map, threshold=80):
    tokens = re.findall(r"[‡∏Å-‡πôa-zA-Z0-9]+", text)
    matched_keys = set()

    for token in tokens:
        match, score = process.extractOne(token, reverse_map.keys())
        if score >= threshold:
            matched_keys.add(reverse_map[match])
    
    return matched_keys

def build_menu_code(keys):
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° prefix ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    order = ['RN', 'WRN', 'EN', 'TRN', 'DPL', 'GN',  # ‡πÄ‡∏™‡πâ‡∏ô
             'WA', 'DR', 'TS', 'TY', 'SO',           # ‡∏ô‡πâ‡∏≥/‡πÅ‡∏´‡πâ‡∏á/‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡πâ‡∏≥‡∏ã‡∏∏‡∏õ
             'MS', 'MD', 'MG', 'MT', 'KT', 'CM', 'SAU',  # ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå
             '01', '02']                              # ‡∏Ç‡∏ô‡∏≤‡∏î
             
    code = ''
    for key in order:
        if key in keys:
            code += key
    return code

def find_menu(text):
    keys = extract_keywords(text, reverse_map)
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô 01/02 ‡πÉ‡∏´‡πâ default ‡πÄ‡∏õ‡πá‡∏ô 01
    if not any(k in keys for k in ['01', '02']):
        keys.add('01')

    menu_code = build_menu_code(keys)

    if menu_code in menu_db:
        return menu_code, menu_db[menu_code]
    else:
        # fuzzy search ‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
        best_match, score = process.extractOne(text, menu_db.values())
        for code, name in menu_db.items():
            if name == best_match:
                return code, name + f" (map score {score}%)"
    
    return None, "404 Not found"

# üîç tesstttt
order_text = "‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö‡∏ï‡πâ‡∏°‡∏¢‡∏≥ x 1‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å x 1"
code, name = find_menu(order_text)
print(f"Matched Code: {code}\nMenu Name: {name}")
